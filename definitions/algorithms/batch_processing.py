#!/usr/bin/env python

# Parse all 'step' data folders inside the given folder. For each of them,
# (if not already done) generate a tet-mesh with Gmsh. For each of them,
# (if not already done) generate a labeling with automatic_polycube, and one with evocube. For each of them,
# (if not already done) generate a hex-mesh with polycube_withHexEx. For each of them,
# TODO (if not already done) generate a hex-mesh with global_padding. For each of them,
# TODO (if not already done) generate a hex-mesh with inner_smoothing.

# https://github.com/LIHPC-Computational-Geometry/HexMeshWorkshop/blob/ee4f61e239678bf9274cbc22e9d054664f01b1ec/modules/data_folder_types.py#L1318
# https://github.com/LIHPC-Computational-Geometry/HexMeshWorkshop/blob/f082a55515b2570d6a4b19dd4dfdc891641929b1/modules/data_folder_types.py#L1289

from rich.prompt import Confirm

from dds import *

def main(input_folder: Path, arguments: list, silent_output: bool):
    # check `arguments`
    if len(arguments) != 0:
        logging.fatal(f'batch_processing does not need other arguments than the input folder, but {arguments} were provided')
        exit(1)
    for step_subfolder in get_subfolders_of_type(input_folder,'step'):
        step_object: DataFolder = DataFolder(step_subfolder)
        # tetrahedrization if not already done
        if not (step_subfolder / 'Gmsh_0.1').exists():
            if Confirm.ask(f"No '[b]Gmsh_0.1[/]' inside [cyan]{collapseuser(step_subfolder)}[/] model. Run Gmsh?"):
                step_object.run('Gmsh', {'characteristic_length_factor': 0.1})
                # here we assert Gmsh succeeded
            else:
                continue # ignore this 'step_subfolder'
        # instantiate the tet mesh folder
        tet_mesh_object: DataFolder = DataFolder(step_subfolder / 'Gmsh_0.1')
        assert(tet_mesh_object.type == 'tet-mesh')
        # get all labeling generated by 'automatic_polycube'
        labeling_subfolders_generated_by_automatic_polycube: list[Path] = tet_mesh_object.get_subfolders_generated_by('automatic_polycube')
        assert(len(labeling_subfolders_generated_by_automatic_polycube) <= 1) # expecting 0 or 1 labeling generated by this algo, not more
        labeling_subfolders_to_look_into = list()
        if len(labeling_subfolders_generated_by_automatic_polycube)==0:
            if Confirm.ask(f"No labeling from '[b]automatic_polycube[/]' inside [cyan]{collapseuser(tet_mesh_object.path)}[/]. Run automatic_polycube?"):
                tet_mesh_object.run('automatic_polycube')
                # here we assert automatic_polycube succeeded
                # TODO retrieve the path to the created folder, and append it to labeling_subfolders_to_look_into
            # else: don't append anything to labeling_subfolders_to_look_into
        else:
            labeling_subfolders_to_look_into.append(labeling_subfolders_generated_by_automatic_polycube[0])
        # get all labeling generated by 'evocube'
        labeling_subfolders_generated_by_evocube: list[Path] = tet_mesh_object.get_subfolders_generated_by('evocube')
        assert(len(labeling_subfolders_generated_by_evocube) <= 1) # expecting 0 or 1 labeling generated by this algo, not more
        if len(labeling_subfolders_generated_by_evocube)==0:
            if Confirm.ask(f"No labeling from '[b]evocube[/]' inside [cyan]{collapseuser(tet_mesh_object.path)}[/]. Run evocube?"):
                tet_mesh_object.run('evocube')
                # here we assert evocube succeeded
                # TODO retrieve the path to the created folder, and append it to labeling_subfolders_to_look_into
            # else: don't append anything to labeling_subfolders_to_look_into
        else:
            labeling_subfolders_to_look_into.append(labeling_subfolders_generated_by_evocube[0])
        # loop with 2 iterations: 1 for the automatic_polycube labeling, 1 for the evocube labeling
        for labeling_subfolder in labeling_subfolders_to_look_into:
            # instantiate the labeling data folder
            labeling_object: DataFolder = DataFolder(labeling_subfolder)
            assert(labeling_object.type == 'labeling')
            # hex-mesh extraction if not already done
            if not (labeling_subfolder / 'polycube_withHexEx_1.3').exists():
                if Confirm.ask(f"No '[b]polycube_withHexEx_1.3[/]' inside [cyan]{collapseuser(labeling_object.path)}[/]. Run polycube_withHexEx?"):
                    labeling_object.run('polycube_withHexEx', {'scale': 1.3})
                    # here we assert polycube_withHexEx succeeded
                else:
                    continue
            #instantiate the hex-mesh folder
            hex_mesh_object: DataFolder = DataFolder(labeling_subfolder / 'polycube_withHexEx_1.3')
            assert(hex_mesh_object.type == 'hex-mesh')