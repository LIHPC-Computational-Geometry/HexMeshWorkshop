#!/usr/bin/env python

# Analysis of the subfolders generated by 'batch_Gmsh.py'

from sys import path
from pathlib import Path
from rich.console import Console
from rich.traceback import install
import logging

# Add root of HexMeshWorkshop project folder in path
project_root = str(Path(__file__).parent.parent.absolute())
if path[-1] != project_root: path.append(project_root)

# colored and detailed Python traceback
install(show_locals=True,width=Console().width,word_wrap=True)

from modules.data_folder_types import *

from icecream import ic

nb_CAD = 0

nb_meshes_fail = 0
nb_meshes_success = 0

labelings_fail = list()
invalid_labelings = list()
valid_labelings_but_non_monotone = list()
valid_and_all_monotone_labelings = list()

root_folder = root()
for level_minus_1_folder in [x for x in root_folder.path.iterdir() if x.is_dir()]:
    if not (level_minus_1_folder / step.FILENAMES.STEP).exists():
        logging.warning(f"Folder {level_minus_1_folder} has no {step.FILENAMES.STEP}")
        continue
    nb_CAD += 1
    for level_minus_2_folder in [x for x in level_minus_1_folder.iterdir() if x.is_dir()]:
        if not (level_minus_2_folder / tet_mesh.FILENAMES.SURFACE_MESH_OBJ).exists():
            logging.warning(f"Folder {level_minus_2_folder} has no {tet_mesh.FILENAMES.SURFACE_MESH_OBJ}")
            nb_meshes_fail += 1
            continue
        nb_meshes_success += 1
        for level_minus_3_folder in [x for x in level_minus_2_folder.iterdir() if x.is_dir()]:
            if not (level_minus_3_folder / labeling.FILENAMES.SURFACE_LABELING_TXT).exists():
                logging.warning(f"Folder {level_minus_3_folder} has no {labeling.FILENAMES.SURFACE_LABELING_TXT}")
                labelings_fail.append(f'{level_minus_1_folder.name}/{level_minus_2_folder.name}/{level_minus_3_folder.name}')
                continue
            labeling_folder = AbstractDataFolder.instantiate(level_minus_3_folder)
            assert(labeling_folder.type() == 'labeling')
            stats = labeling_folder.get_labeling_stats_dict()
            if stats['charts']['invalid'] > 0 or stats['boundaries']['invalid'] > 0 or stats['corners']['invalid'] > 0:
                invalid_labelings.append(f'{level_minus_1_folder.name}/{level_minus_2_folder.name}/{level_minus_3_folder.name}')
                continue
            if stats['turning-points']['nb'] > 0:
                valid_labelings_but_non_monotone.append(f'{level_minus_1_folder.name}/{level_minus_2_folder.name}/{level_minus_3_folder.name}')
                continue
            valid_and_all_monotone_labelings.append(f'{level_minus_1_folder.name}/{level_minus_2_folder.name}/{level_minus_3_folder.name}')


ic(nb_CAD)

ic(nb_meshes_fail)
ic(nb_meshes_success)

ic(len(labelings_fail))
ic(labelings_fail)
ic(len(invalid_labelings))
ic(invalid_labelings)
ic(len(valid_labelings_but_non_monotone))
ic(valid_labelings_but_non_monotone)
ic(len(valid_and_all_monotone_labelings))
ic(valid_and_all_monotone_labelings)